@api.route('/{endpoint}/', methods=['POST', 'GET', 'DELETE', 'PUT'])
@api.route('/{endpoint}/<int:model_id>/', methods=['GET', 'DELETE', 'PUT'])
class {model_name}Route(Resource):
    def get(self, model_id: int = None):
        if model_id is None:
            all_objects = {model_name}.query.all()
            output = [{{'id': obj.id, **{form_name}(obj=obj).data}} for obj in all_objects]
        else:
            obj = {model_name}.query.get(model_id)
            if obj is None:
                return {{
                           'message': 'matching record not found',
                           'success': False
                       }}, 404
            output = {{'id': obj.id, **{form_name}(obj=obj).data}}
        return {{
                   'data': output,
                   'success': True
               }}, 200

    @token_required
    def post(self):
        try:
            body_of_req = request.form
            if not body_of_req:
                raise Exception()
        except Exception:
            if len(request.data) > 0:
                body_of_req = json.loads(request.data)
            else:
                body_of_req = {{}}
        form = {form_name}(MultiDict(body_of_req))
        if form.validate():
            try:
                obj = {model_name}(**body_of_req)
                {model_name}.query.session.add(obj)
                {model_name}.query.session.commit()
            except Exception as e:
                return {{
                           'message': str(e),
                           'success': False
                       }}, 400
        else:
            return {{
                       'message': form.errors,
                       'success': False
                   }}, 400
        return {{
                   'message': 'record saved!',
                   'success': True
               }}, 200

    @token_required
    def put(self, model_id: int):
        try:
            body_of_req = request.form
            if not body_of_req:
                raise Exception()
        except Exception:
            if len(request.data) > 0:
                body_of_req = json.loads(request.data)
            else:
                body_of_req = {{}}

        to_edit_row = {model_name}.query.filter_by(id=model_id)

        if not to_edit_row:
            return {{
                       'message': 'matching record not found',
                       'success': False
                   }}, 404

        obj = to_edit_row.first()

        if not obj:
            return {{
                       'message': 'matching record not found',
                       'success': False
                   }}, 404

        form = {form_name}(MultiDict(body_of_req), obj=obj)
        if not form.validate():
            return {{
                       'message': form.errors,
                       'success': False
                   }}, 404

        table_cols = [attr.name for attr in to_edit_row.__dict__['_raw_columns'][0].columns._all_columns]

        for col in table_cols:
            value = body_of_req.get(col, None)
            if value:
                setattr(obj, col, value)
        {model_name}.query.session.add(obj)
        {model_name}.query.session.commit()
        return {{
            'message': 'record updated',
            'success': True
        }}

    @token_required
    def delete(self, model_id: int):
        to_delete = {model_name}.query.filter_by(id=model_id)
        if to_delete.count() == 0:
            return {{
                       'message': 'matching record not found',
                       'success': False
                   }}, 404
        to_delete.delete()
        {model_name}.query.session.commit()
        return {{
                   'message': 'record deleted!',
                   'success': True
               }}, 200
